#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceOrdersWebApplication.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ServiceOrderManager")]
	public partial class ServiceOrdersDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertServiceOrderDetail(ServiceOrderDetail instance);
    partial void UpdateServiceOrderDetail(ServiceOrderDetail instance);
    partial void DeleteServiceOrderDetail(ServiceOrderDetail instance);
    partial void InsertServiceOrderStatus(ServiceOrderStatus instance);
    partial void UpdateServiceOrderStatus(ServiceOrderStatus instance);
    partial void DeleteServiceOrderStatus(ServiceOrderStatus instance);
    partial void InsertServiceOrder(ServiceOrder instance);
    partial void UpdateServiceOrder(ServiceOrder instance);
    partial void DeleteServiceOrder(ServiceOrder instance);
    #endregion
		
		public ServiceOrdersDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ServiceOrderManagerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ServiceOrdersDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ServiceOrdersDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ServiceOrdersDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ServiceOrdersDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<ServiceOrderDetail> ServiceOrderDetails
		{
			get
			{
				return this.GetTable<ServiceOrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<ServiceOrderStatus> ServiceOrderStatus
		{
			get
			{
				return this.GetTable<ServiceOrderStatus>();
			}
		}
		
		public System.Data.Linq.Table<ServiceOrder> ServiceOrders
		{
			get
			{
				return this.GetTable<ServiceOrder>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Settings")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SettingID;
		
		private string _ServiceOrderNumberPrefix;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingIDChanging(int value);
    partial void OnSettingIDChanged();
    partial void OnServiceOrderNumberPrefixChanging(string value);
    partial void OnServiceOrderNumberPrefixChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SettingID
		{
			get
			{
				return this._SettingID;
			}
			set
			{
				if ((this._SettingID != value))
				{
					this.OnSettingIDChanging(value);
					this.SendPropertyChanging();
					this._SettingID = value;
					this.SendPropertyChanged("SettingID");
					this.OnSettingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceOrderNumberPrefix", DbType="NVarChar(50)")]
		public string ServiceOrderNumberPrefix
		{
			get
			{
				return this._ServiceOrderNumberPrefix;
			}
			set
			{
				if ((this._ServiceOrderNumberPrefix != value))
				{
					this.OnServiceOrderNumberPrefixChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderNumberPrefix = value;
					this.SendPropertyChanged("ServiceOrderNumberPrefix");
					this.OnServiceOrderNumberPrefixChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceOrderDetails")]
	public partial class ServiceOrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceOrderDetailID;
		
		private System.Nullable<int> _ServiceOrderID;
		
		private System.Nullable<int> _Qty;
		
		private string _Description;
		
		private System.Nullable<decimal> _UnitPrice;
		
		private EntityRef<ServiceOrder> _ServiceOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceOrderDetailIDChanging(int value);
    partial void OnServiceOrderDetailIDChanged();
    partial void OnServiceOrderIDChanging(System.Nullable<int> value);
    partial void OnServiceOrderIDChanged();
    partial void OnQtyChanging(System.Nullable<int> value);
    partial void OnQtyChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUnitPriceChanging(System.Nullable<decimal> value);
    partial void OnUnitPriceChanged();
    #endregion
		
		public ServiceOrderDetail()
		{
			this._ServiceOrder = default(EntityRef<ServiceOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceOrderDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServiceOrderDetailID
		{
			get
			{
				return this._ServiceOrderDetailID;
			}
			set
			{
				if ((this._ServiceOrderDetailID != value))
				{
					this.OnServiceOrderDetailIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderDetailID = value;
					this.SendPropertyChanged("ServiceOrderDetailID");
					this.OnServiceOrderDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceOrderID", DbType="Int")]
		public System.Nullable<int> ServiceOrderID
		{
			get
			{
				return this._ServiceOrderID;
			}
			set
			{
				if ((this._ServiceOrderID != value))
				{
					if (this._ServiceOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceOrderIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderID = value;
					this.SendPropertyChanged("ServiceOrderID");
					this.OnServiceOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int")]
		public System.Nullable<int> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceOrder_ServiceOrderDetail", Storage="_ServiceOrder", ThisKey="ServiceOrderID", OtherKey="ServiceOrderID", IsForeignKey=true)]
		public ServiceOrder ServiceOrder
		{
			get
			{
				return this._ServiceOrder.Entity;
			}
			set
			{
				ServiceOrder previousValue = this._ServiceOrder.Entity;
				if (((previousValue != value) 
							|| (this._ServiceOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceOrder.Entity = null;
						previousValue.ServiceOrderDetails.Remove(this);
					}
					this._ServiceOrder.Entity = value;
					if ((value != null))
					{
						value.ServiceOrderDetails.Add(this);
						this._ServiceOrderID = value.ServiceOrderID;
					}
					else
					{
						this._ServiceOrderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ServiceOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceOrderStatus")]
	public partial class ServiceOrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceOrderStatusID;
		
		private string _Description;
		
		private System.Nullable<int> _OrderNumber;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private EntitySet<ServiceOrder> _ServiceOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceOrderStatusIDChanging(int value);
    partial void OnServiceOrderStatusIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnOrderNumberChanging(System.Nullable<int> value);
    partial void OnOrderNumberChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public ServiceOrderStatus()
		{
			this._ServiceOrders = new EntitySet<ServiceOrder>(new Action<ServiceOrder>(this.attach_ServiceOrders), new Action<ServiceOrder>(this.detach_ServiceOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceOrderStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServiceOrderStatusID
		{
			get
			{
				return this._ServiceOrderStatusID;
			}
			set
			{
				if ((this._ServiceOrderStatusID != value))
				{
					this.OnServiceOrderStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderStatusID = value;
					this.SendPropertyChanged("ServiceOrderStatusID");
					this.OnServiceOrderStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumber", DbType="Int")]
		public System.Nullable<int> OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceOrderStatus_ServiceOrder", Storage="_ServiceOrders", ThisKey="ServiceOrderStatusID", OtherKey="StatusID")]
		public EntitySet<ServiceOrder> ServiceOrders
		{
			get
			{
				return this._ServiceOrders;
			}
			set
			{
				this._ServiceOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.ServiceOrderStatus = this;
		}
		
		private void detach_ServiceOrders(ServiceOrder entity)
		{
			this.SendPropertyChanging();
			entity.ServiceOrderStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceOrders")]
	public partial class ServiceOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceOrderID;
		
		private System.Nullable<int> _SupplierID;
		
		private string _ServiceOrderNumber;
		
		private string _TermsAndConditions;
		
		private string _AcceptanceName;
		
		private string _ApprovedBy;
		
		private string _PaymentTerms;
		
		private System.Nullable<decimal> _PercentageOfCompletion;
		
		private System.Nullable<int> _StatusID;
		
		private System.Nullable<bool> _IsPaid;
		
		private System.Nullable<bool> _IsApproved;
		
		private EntitySet<ServiceOrderDetail> _ServiceOrderDetails;
		
		private EntityRef<ServiceOrderStatus> _ServiceOrderStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceOrderIDChanging(int value);
    partial void OnServiceOrderIDChanged();
    partial void OnSupplierIDChanging(System.Nullable<int> value);
    partial void OnSupplierIDChanged();
    partial void OnServiceOrderNumberChanging(string value);
    partial void OnServiceOrderNumberChanged();
    partial void OnTermsAndConditionsChanging(string value);
    partial void OnTermsAndConditionsChanged();
    partial void OnAcceptanceNameChanging(string value);
    partial void OnAcceptanceNameChanged();
    partial void OnApprovedByChanging(string value);
    partial void OnApprovedByChanged();
    partial void OnPaymentTermsChanging(string value);
    partial void OnPaymentTermsChanged();
    partial void OnPercentageOfCompletionChanging(System.Nullable<decimal> value);
    partial void OnPercentageOfCompletionChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    partial void OnIsPaidChanging(System.Nullable<bool> value);
    partial void OnIsPaidChanged();
    partial void OnIsApprovedChanging(System.Nullable<bool> value);
    partial void OnIsApprovedChanged();
    #endregion
		
		public ServiceOrder()
		{
			this._ServiceOrderDetails = new EntitySet<ServiceOrderDetail>(new Action<ServiceOrderDetail>(this.attach_ServiceOrderDetails), new Action<ServiceOrderDetail>(this.detach_ServiceOrderDetails));
			this._ServiceOrderStatus = default(EntityRef<ServiceOrderStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceOrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServiceOrderID
		{
			get
			{
				return this._ServiceOrderID;
			}
			set
			{
				if ((this._ServiceOrderID != value))
				{
					this.OnServiceOrderIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderID = value;
					this.SendPropertyChanged("ServiceOrderID");
					this.OnServiceOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="Int")]
		public System.Nullable<int> SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceOrderNumber", DbType="NVarChar(50)")]
		public string ServiceOrderNumber
		{
			get
			{
				return this._ServiceOrderNumber;
			}
			set
			{
				if ((this._ServiceOrderNumber != value))
				{
					this.OnServiceOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._ServiceOrderNumber = value;
					this.SendPropertyChanged("ServiceOrderNumber");
					this.OnServiceOrderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermsAndConditions", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TermsAndConditions
		{
			get
			{
				return this._TermsAndConditions;
			}
			set
			{
				if ((this._TermsAndConditions != value))
				{
					this.OnTermsAndConditionsChanging(value);
					this.SendPropertyChanging();
					this._TermsAndConditions = value;
					this.SendPropertyChanged("TermsAndConditions");
					this.OnTermsAndConditionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcceptanceName", DbType="NVarChar(500)")]
		public string AcceptanceName
		{
			get
			{
				return this._AcceptanceName;
			}
			set
			{
				if ((this._AcceptanceName != value))
				{
					this.OnAcceptanceNameChanging(value);
					this.SendPropertyChanging();
					this._AcceptanceName = value;
					this.SendPropertyChanged("AcceptanceName");
					this.OnAcceptanceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedBy", DbType="NVarChar(100)")]
		public string ApprovedBy
		{
			get
			{
				return this._ApprovedBy;
			}
			set
			{
				if ((this._ApprovedBy != value))
				{
					this.OnApprovedByChanging(value);
					this.SendPropertyChanging();
					this._ApprovedBy = value;
					this.SendPropertyChanged("ApprovedBy");
					this.OnApprovedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTerms", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string PaymentTerms
		{
			get
			{
				return this._PaymentTerms;
			}
			set
			{
				if ((this._PaymentTerms != value))
				{
					this.OnPaymentTermsChanging(value);
					this.SendPropertyChanging();
					this._PaymentTerms = value;
					this.SendPropertyChanged("PaymentTerms");
					this.OnPaymentTermsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentageOfCompletion", DbType="Decimal(18,1)")]
		public System.Nullable<decimal> PercentageOfCompletion
		{
			get
			{
				return this._PercentageOfCompletion;
			}
			set
			{
				if ((this._PercentageOfCompletion != value))
				{
					this.OnPercentageOfCompletionChanging(value);
					this.SendPropertyChanging();
					this._PercentageOfCompletion = value;
					this.SendPropertyChanged("PercentageOfCompletion");
					this.OnPercentageOfCompletionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._ServiceOrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPaid", DbType="Bit")]
		public System.Nullable<bool> IsPaid
		{
			get
			{
				return this._IsPaid;
			}
			set
			{
				if ((this._IsPaid != value))
				{
					this.OnIsPaidChanging(value);
					this.SendPropertyChanging();
					this._IsPaid = value;
					this.SendPropertyChanged("IsPaid");
					this.OnIsPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit")]
		public System.Nullable<bool> IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceOrder_ServiceOrderDetail", Storage="_ServiceOrderDetails", ThisKey="ServiceOrderID", OtherKey="ServiceOrderID")]
		public EntitySet<ServiceOrderDetail> ServiceOrderDetails
		{
			get
			{
				return this._ServiceOrderDetails;
			}
			set
			{
				this._ServiceOrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceOrderStatus_ServiceOrder", Storage="_ServiceOrderStatus", ThisKey="StatusID", OtherKey="ServiceOrderStatusID", IsForeignKey=true)]
		public ServiceOrderStatus ServiceOrderStatus
		{
			get
			{
				return this._ServiceOrderStatus.Entity;
			}
			set
			{
				ServiceOrderStatus previousValue = this._ServiceOrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._ServiceOrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceOrderStatus.Entity = null;
						previousValue.ServiceOrders.Remove(this);
					}
					this._ServiceOrderStatus.Entity = value;
					if ((value != null))
					{
						value.ServiceOrders.Add(this);
						this._StatusID = value.ServiceOrderStatusID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ServiceOrderStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceOrderDetails(ServiceOrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.ServiceOrder = this;
		}
		
		private void detach_ServiceOrderDetails(ServiceOrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.ServiceOrder = null;
		}
	}
}
#pragma warning restore 1591
